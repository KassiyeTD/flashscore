package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

const uri = "mongodb+srv://Nurkanat:Nurkanat05@users.rstbs.mongodb.net/?retryWrites=true&w=majority"

func getAllDatabasesAndCollections() error {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	clientOptions := options.Client().ApplyURI(uri).SetAuth(options.Credential{
		Username: "Nurkanat",
		Password: "Nurkanat05",
	})

	fmt.Println("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB...")

	client, err := mongo.Connect(ctx, clientOptions)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: %v", err)
		return err
	}

	fmt.Println("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB...")
	err = client.Ping(ctx, nil)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ MongoDB: %v", err)
		return err
	}

	fmt.Println("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É listDatabases...")

	adminDB := client.Database("admin")
	var result bson.M
	err = adminDB.RunCommand(ctx, bson.D{{"listDatabases", 1}}).Decode(&result)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã listDatabases: %v", err)
		return err
	}

	databases, ok := result["databases"].(bson.A)
	if !ok {
		log.Fatal("–û—à–∏–±–∫–∞: MongoDB –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
		return fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ MongoDB")
	}

	for _, dbEntry := range databases {
		dbInfo, _ := dbEntry.(bson.M)
		dbName := dbInfo["name"].(string)
		fmt.Println("\nüìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:", dbName)

		db := client.Database(dbName)

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º RunCommand –≤–º–µ—Å—Ç–æ ListCollections
		var collResult bson.M
		err = db.RunCommand(ctx, bson.D{{"listCollections", 1}}).Decode(&collResult)
		if err != nil {
			fmt.Printf("  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ listCollections: %v\n", err)
			continue
		}

		collections, ok := collResult["cursor"].(bson.M)["firstBatch"].(bson.A)
		if !ok {
			fmt.Println("  ‚ùå –í —ç—Ç–æ–π –±–∞–∑–µ –Ω–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–π.")
			continue
		}

		if len(collections) == 0 {
			fmt.Println("  ‚ùå –í —ç—Ç–æ–π –±–∞–∑–µ –Ω–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–π.")
		} else {
			fmt.Println("  üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏–∏:")
			for _, collection := range collections {
				collInfo, _ := collection.(bson.M)
				fmt.Println("    -", collInfo["name"])
			}
		}
	}

	return nil
}

func main() {
	err := getAllDatabasesAndCollections()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
	}
}
